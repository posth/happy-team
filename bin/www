#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app.js');
var debug = require('debug')('node-rest:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//exporting the server variable to be able to use elsewhere in the application
var serverConfig = module.exports = {};
serverConfig.server = server;

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*
  Sockets
*/

var io = require('socket.io').listen(server);

//Question One Controller
var healthController = require("../server/health/question-one/healthController.js");

//Question Two Controller
var questionTwoController = require('../server/health/question-two/questionTwoController.js');

//Question Three Controller
var questionThreeController = require('../server/health/question-three/questionThreeController.js');

io.on('connection', function (socket) {

  socket.on('questionOneUpdate', function (userInfo) {

    //Health path when a user inputs their health, it adds it to the database, sets a team value and broadcasts it
    healthController.setLatestUserHealthValue(userInfo)
      .then(healthController.setLatestTeamHealthValue)
      .then(healthController.getLatestTeamHealthValue)
      .then(function (result) {
        console.log('returned team question one result', result);
        socket.broadcast.emit('getlatestTeamQuestionOneValue', result);
      })
  })

  socket.on('questionTwoUpdate', function (userInfo) {

    //Health path when a user inputs their health, it adds it to the database, sets a team value and broadcasts it
    questionTwoController.setLatestUserQuestionTwoValue(userInfo)
      .then(questionTwoController.setLatestTeamQuestionTwoValue)
      .then(questionTwoController.getLatestQuestionTwoValue)
      .then(function (result) {
        console.log('returned team question two result', result);
        socket.broadcast.emit('getlatestTeamQuestionTwoValue', result);
      })
  })

  socket.on('questionThreeUpdate', function (userInfo) {

    //Health path when a user inputs their health, it adds it to the database, sets a team value and broadcasts it
    questionThreeController.setLatestUserQuestionThreeValue(userInfo)
      .then(questionThreeController.setLatestTeamQuestionThreeValue)
      .then(questionThreeController.getLatestQuestionThreeValue)
      .then(function (result) {
        socket.broadcast.emit('getlatestTeamQuestionThreeValue', result);
      })
  })

});


