#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app.js');
var debug = require('debug')('node-rest:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*
  Sockets
*/

var io = require('socket.io').listen(server);
var healthController = require("../server/health/controllers/healthController.js");

io.on('connection', function (socket) {

  socket.on('healthUpdate', function (userInfo) {
    // socket.broadcast.emit('getLatestTeamHealthValue', 100);
    //console.log('--------------------------------------socket user info------------------', userInfo);

    //Saving user health 
    // healthController.setLatestUserHealthValue(userInfo);
    //Saving user health promise
    var setLatestUserHealthValueTemp = function (setLatestTeamHealthValue) {
      var setLatestUserHealthValuePromise = new Promise(function (resolve, reject) {
        healthController.setLatestUserHealthValue(userInfo);
        resolve();
      })
      return setLatestUserHealthValuePromise;
    }

    //Setting team health 
    // healthController.setLatestTeamHealthValue();
    //Setting team health promise
    var setLatestTeamHealthValueTemp = function (getLatestTeamHealthValue) {
      var getLatestTeamHealthValuePromise = new Promise(function (resolve, reject) {
        healthController.setLatestTeamHealthValue();
        resolve();
      })
      return getLatestTeamHealthValuePromise;
    }

    //Getting latest team health value
    healthController.getLatestTeamHealthValue();
    //Getting latest team health value promise
    var getLatestTeamHealthValueTemp = function(setLatestTeamHealthValueTemp) {
      var getLatestTeamHealthValuePromise = new Promise(function(resolve, reject) {
        healthController.getLatestTeamHealthValue();
        resolve();
      })
      return getLatestTeamHealthValuePromise;
    }

    //Setting off health path promises
    // setLatestUserHealthValueTemp(setLatestTeamHealthValueTemp)
    //   .then(getLatestTeamHealthValueTemp);
    // setLatestUserHealthValueTemp()
    //   .then(setLatestTeamHealthValueTemp)
    //   .then(getLatestTeamHealthValueTemp);

    getLatestTeamHealthValueTemp()
      .then(setLatestTeamHealthValueTemp)
      .then(setLatestUserHealthValueTemp);
      console.log('---------------f----------------------------------------------------------------------------------');

  })
});


